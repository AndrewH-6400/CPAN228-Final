package com.Humber.FinalProject.CPAN228_FinalProject.repositories;

import com.Humber.FinalProject.CPAN228_FinalProject.models.Game;


import com.Humber.FinalProject.CPAN228_FinalProject.services.GamesService;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
@Repository
public class CustomIGDBRepository {

    @Value("${client.id}")
    private String clientId;

    @Value("${client.access.token}")
    private String accessToken;

    private final GamesService gamesService;

    public CustomIGDBRepository(GamesService gamesService) {
        this.gamesService = gamesService;
    }

    private final String IGDB_URl = "https://api.igdb.com/v4";
    private final String GAME_FIELDS = "name,summary,involved_companies,genres,themes";
//    private String id; will be generated by mongodb later
//    private String title; simple field
//    private String description; simple field, could use a fallback to other provided fields
//    private String developer; take the ids and search involved_companies then find the one that is a developer and use the company field to search companies to find the info
//    private String publisher; same as developer
//    private List<String> genres; will return genre ids that will have to be searched
//    private List<String> themes; same as genres

    //search IGDB for game by title
    //alright so gameplan for this part
    //this should return a JSONArray object thing, then other functions will use that and getJSONObject(0) to get the information
    //to I will also need to create another to return information like genres etc
    public JSONArray searchIGDBbyTitle(String title) {
        try {
            HttpResponse<JsonNode> jsonResponse = Unirest.post(IGDB_URl+"/games")
                    .header("Client-ID", clientId)
                    .header("Authorization", accessToken)
                    .header("Accept", "application/json")
                    .body("fields "+GAME_FIELDS+"; where name = "+'"'+title+'"'+";")
                    .asJson();
//            String rec_title = jsonResponse.getBody()
            //JSONObject jsonObject = jsonResponse.getBody().getArray().getJSONObject(0);
            JSONArray jsonArray = jsonResponse.getBody().getArray();
            //System.out.println(jsonObject.get("genres"));
            return jsonArray;
            //System.out.println(jsonResponse.getBody().getArray().getJSONObject(0).get("summary"));
            //System.out.println(jsonObject.getJSONArray("genres").iterator().toString());
        } catch (UnirestException e) {
            throw new RuntimeException(e);
        }
    }

    public void saveIGDBbyTitle(String title) {
        Game game = new Game();
        JSONObject jsonObject = searchIGDBbyTitle(title).getJSONObject(0);

//        game.setTitle(jsonObject.get("name").toString());
//        game.setDeveloper("W.I.P.");
        ArrayList<String> genre = new ArrayList<>();
        Iterator g = jsonObject.getJSONArray("genres").iterator();
        while(g.hasNext()){
            genre.add(g.next().toString());
        }
        System.out.println(genre);

    }
}
